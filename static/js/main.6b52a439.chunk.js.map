{"version":3,"sources":["App.js","index.js"],"names":["nums","ops","ids","App","useState","undefined","lastPressed","setLastPressed","calc","setCalc","handleClick","e","innerText","target","evaluated","eval","console","log","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","className","id","onClick","map","num","op","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k4BAGMA,KAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnCC,IAAM,CAAE,IAAK,IAAK,IAAK,KACvBC,IAAM,CACV,EAAG,QACH,EAAG,QACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,MACH,EAAG,MACH,EAAG,MACH,EAAG,QACH,EAAG,OACH,IAAK,SACL,IAAK,WACL,IAAK,WACL,IAAK,OAGDC,IAAM,SAANA,MACJ,cAAqCC,yDAASC,GAA9C,wNAAOC,YAAP,cAAmBC,eAAnB,cACA,WAAwBH,oDAAS,KAAjC,yNAAOI,KAAP,cAAaC,QAAb,cAEMC,YAAc,SAAdA,YAAeC,GACnB,IAAQC,UAAcD,EAAEE,OAAhBD,UAER,OAAQA,WACN,IAAK,KACHH,QAAQ,KACR,MAGF,IAAK,IACH,IAAMK,UAAYC,KAAKP,MACvBQ,QAAQC,IAAIH,WACZL,QAAQK,WACR,MAGF,IAAK,IACH,IAAMI,SAAWV,KAAKW,MAAM,cACtBC,KAAOF,SAASG,OAAO,GAAG,GAC5BD,KAAKE,SAAS,MACdb,QAAQD,KAAM,KAElB,MAGF,QACE,IAAIG,QAAIN,EAER,GAAGJ,IAAIqB,SAASV,WACd,GAAGX,IAAIqB,SAAShB,cAA8B,MAAdM,UAAmB,CAEjD,IAAMW,cAAgBf,KAAKW,MAAM,IAAIK,UACpCC,WAAU,SAAAC,GAAI,MAAa,MAATA,GAAgB1B,KAAKsB,UAAUI,MAClDf,GAAIH,KAAKa,MAAM,EAAGb,KAAKmB,OAASJ,eAA5B,WAAiDX,UAAjD,UAEJD,GAAC,UAAMH,KAAN,YAAcI,UAAd,UAGHD,GAAc,MAATH,KAAgBI,UAAaJ,KAAOI,UAG3CH,QAAQE,IAKZJ,eAAeK,YAGjB,OACE,mEAAKgB,UAAU,aAAf,UACE,mEAAKC,GAAG,UAAUD,UAAU,UAA5B,UACE,uEACCpB,QAGH,mEAAKoB,UAAU,iBAAf,UACE,qEACEA,UAAU,sBACVC,GAAG,QACHC,QAASpB,YAHX,gBAQCV,KAAK+B,KAAI,SAAAC,GAAG,OACX,qEACEJ,UAAS,oBAAuB,IAARI,GAAa,SAErCF,QAASpB,YACTmB,GAAI3B,IAAI8B,GAJV,SAMGA,GAJIA,MAQT,qEACEJ,UAAU,aACVE,QAASpB,YACTmB,GAAG,UAHL,kBAQF,mEAAKD,UAAU,gBAAf,UACG3B,IAAI8B,KAAI,SAAAE,GAAE,OACT,qEACEL,UAAU,SAEVE,QAASpB,YACTmB,GAAI3B,IAAI+B,GAJV,SAMGA,GAJIA,MAQT,qEACEL,UAAU,SACVE,QAASpB,YACTmB,GAAG,SAHL,sBAYO1B,2B,6BCtIf,iEAKA+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.6b52a439.chunk.js","sourcesContent":["import React,{ useState } from 'react';\nimport './App.css'\n\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst ops = [ '/', '*', '-', '+'];\nconst ids = {\n  7: 'seven', \n  8: 'eight', \n  9: 'nine', \n  4: 'four', \n  5: 'five', \n  6: 'six', \n  1: 'one', \n  2: 'two', \n  3: 'three', \n  0: 'zero',\n  '/': 'divide', \n  '*': 'multiply', \n  '-': 'subtract', \n  '+': 'add'\n}\n\nconst App = () => {\n  const [lastPressed,setLastPressed] = useState(undefined);\n  const [calc, setCalc] = useState('0');\n\n  const handleClick = (e) => {\n    const { innerText } = e.target;\n\n    switch (innerText) {\n      case 'AC': {\n        setCalc('0');\n        break;\n      }\n\n      case '=': {\n        const evaluated = eval(calc);\n        console.log(evaluated)\n        setCalc(evaluated);\n        break;\n      }\n\n      case '.': {\n        const splitted = calc.split(/[\\+\\-\\*\\/]/);\n        const last = splitted.slice(-1)[0];\n        if(!last.includes('.')) {\n            setCalc(calc +'.')\n        }\n        break;\n      }\n\n      default: {\n        let e = undefined;\n        //check for other operators\n        if(ops.includes(innerText)) {\n          if(ops.includes(lastPressed) && innerText !== '-') {\n            //Hectic\n            const lastNumberIdx = calc.split('').reverse()\n            .findIndex(char => char !== ' ' && nums.includes(+char)); \n            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n          } else {\n            e = `${calc} ${innerText} `;\n          } \n        }else {\n          e = (calc === '0') ? innerText : (calc + innerText);\n        }\n        \n        setCalc(e);\n        break;\n      }\n    }\n\n    setLastPressed(innerText);\n  }\n\n  return (\n    <div className=\"calculator\">\n      <div id=\"display\" className=\"display\">\n        <small></small>\n        {calc}\n      </div>\n\n      <div className=\"nums-container\">\n        <button\n          className=\"big-h light-grey ac\"\n          id=\"clear\"\n          onClick={handleClick}\n        >\n          AC\n        </button>\n\n        {nums.map(num => (\n          <button\n            className={`dark-grey ${num === 0 && 'big-h'}`}\n            key={num}\n            onClick={handleClick}\n            id={ids[num]}\n          >\n            {num}\n          </button>\n        ))}\n\n        <button \n          className=\"light-grey\"\n          onClick={handleClick}\n          id=\"decimal\"\n        >\n          .\n        </button>\n      </div>\n      <div className=\"ops-container\">\n        {ops.map(op =>(\n          <button \n            className=\"orange\"\n            key={op}\n            onClick={handleClick}\n            id={ids[op]}\n          >\n            {op}\n          </button>\n        ))}\n\n        <button \n          className=\"orange\" \n          onClick={handleClick}\n          id=\"equals\"\n        >\n          =\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}